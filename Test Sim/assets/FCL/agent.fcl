

FUNCTION_BLOCK attribute	// Block definition (there may be more than one block per file)

VAR_INPUT				// Define input variables
	age : REAL;
	gender : REAL;
        eyesight : REAL;
END_VAR

VAR_OUTPUT				// Define output variable
	velocity : REAL;
        vision : REAL;
        agileness : REAL;
END_VAR

FUZZIFY age			// Fuzzify input variable 'age': {'infant', 'poor', 'good' , 'excellent'}
	TERM teen := trian 10 15 20; 
	TERM young := trian 15 25 35;
	TERM middle := trape 30 35 45 50;
        TERM old := (45, 0) (50, 1) (100, 1);
END_FUZZIFY

FUZZIFY gender			// Fuzzify input variable 'food': { 'rancid', 'delicious' }
	TERM male := 0 ;
	TERM female := 1 ;
END_FUZZIFY

FUZZIFY eyesight			// Fuzzify input variable 'age': {'infant', 'poor', 'good' , 'excellent'}
        TERM very_bad := (0, 1) (0.2, 0) (1, 0);
	TERM bad := trape 0.15 0.25 0.4 0.5;
        TERM normal := trape 0.45 0.55 0.7 0.8;
	TERM good := (0.75, 0) (0.85, 1) (1, 1);
END_FUZZIFY

DEFUZZIFY velocity			// Defzzzify output variable 
	TERM slow := (0, 1) (3, 0) (10, 0);
        TERM medium := (2, 0) (3, 1) (4, 1) (5, 0);
	TERM fast := (4, 0) (5, 1) (6, 1) (7, 0);

	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY vision			// Defzzzify output variable 
	TERM bad := (0, 1) (10, 0) (1000, 0);
	TERM medium := trape 0 20 50 70;
	TERM good := (60, 0) (80, 1) (1000, 1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY agileness			// Defzzzify output variable 
	TERM slow := (0, 1) (0.4, 0) (1, 0);
	TERM fast := trian 0.3 0.5 0.7;
	TERM very_fast := (0.6, 0) (1, 1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK No1
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'max' accumulation method

        RULE 1 : IF eyesight IS very_bad THEN velocity IS slow, vision IS bad , agileness IS slow;
        RULE 2 : IF eyesight IS bad THEN velocity IS slow , vision IS bad , agileness IS slow;
        RULE 3 : IF eyesight IS normal THEN velocity IS medium , vision IS medium , agileness IS fast;
        RULE 4 : IF eyesight IS good THEN velocity IS fast , vision IS good , agileness IS very_fast;

        RULE 5 : IF age IS old THEN velocity IS slow , vision IS bad , agileness IS slow;
        RULE 6 : IF age IS middle THEN velocity IS medium , vision IS medium , agileness IS fast;
        RULE 7 : IF age IS young THEN velocity IS fast , vision IS good , agileness IS very_fast;
        RULE 8 : IF age IS teen THEN velocity IS fast , vision IS good , agileness IS fast;

	RULE 9 : IF gender IS male THEN velocity IS fast , vision IS good , agileness IS very_fast;
        RULE 10 : IF gender IS female THEN velocity IS medium , vision IS good , agileness IS fast;
	
END_RULEBLOCK

END_FUNCTION_BLOCK

////////////////////////////////////////////////////////////


FUNCTION_BLOCK decision	// Block definition (there may be more than one block per file)

VAR_INPUT				// Define input variables
	crowd : INT;
	distance : INT;
        smoke : REAL;
        type : INT
END_VAR

VAR_OUTPUT				// Define output variable
	risk : REAL;
END_VAR

FUZZIFY crowd			// Fuzzify input variable 'age': {'infant', 'poor', 'good' , 'excellent'}
	TERM few := (0, 1) (10, 0) (1000, 0); 
	TERM normal := trape 5 15 30 40;
	TERM crowded := (30, 0) (40, 1) (1000, 1);
END_FUZZIFY

FUZZIFY distance			// Fuzzify input variable 'food': { 'rancid', 'delicious' }
	TERM near := (0, 1) (50, 0) (1000, 0) ;
	TERM far := trape 40 50 90 100 ;
        TERM very_far := (90, 0) (100, 1) (1000, 1);
END_FUZZIFY

FUZZIFY smoke			// Fuzzify input variable 'food': { 'rancid', 'delicious' }
	TERM none := (0, 1) (0.2, 0) (1, 0) ;
	TERM cloudy := trape 0.1 0.2 0.5 0.6;
        TERM thick := (0.5, 0) (0.7, 1) (1, 1);
END_FUZZIFY

FUZZIFY type			// Fuzzify input variable 'food': { 'rancid', 'delicious' }
	TERM door := 0 ;
	TERM window := 1 ;
END_FUZZIFY

DEFUZZIFY risk			// Defzzzify output variable 
	TERM low := (0, 1) (0.2, 0) (1, 0) ;
	TERM medium := trape 40 50 90 100 ;
	TERM high := (0.5, 0) (0.7, 1) (1, 1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK No1
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'max' accumulation method

	RULE 1 : IF type IS window THEN risk IS high;
	RULE 2 : IF smoke IS thick THEN risk IS high;
	RULE 3 : IF type IS door AND crowd IS few AND distance IS near AND smoke IS none THEN risk IS low;
        RULE 4 : IF type IS door AND crowd IS few AND distance IS near AND smoke IS cloudy THEN risk IS medium;
        RULE 5 : IF type IS door AND crowd IS few AND distance IS far AND smoke IS none THEN risk IS medium;
        RULE 6 : IF type IS door AND crowd IS few AND distance IS far AND smoke IS cloudy THEN risk IS medium;
        RULE 7 : IF type IS door AND crowd IS few AND distance IS very_far AND smoke IS none THEN risk IS high;
        RULE 8 : IF type IS door AND crowd IS few AND distance IS very_far AND smoke IS cloudy THEN risk IS high;
	RULE 9 : IF type IS door AND crowd IS normal AND distance IS near AND smoke IS none THEN risk IS medium;
        RULE 10 : IF type IS door AND crowd IS normal AND distance IS near AND smoke IS cloudy THEN risk IS medium;
        RULE 11 : IF type IS door AND crowd IS normal AND distance IS far AND smoke IS none THEN risk IS medium;
        RULE 12 : IF type IS door AND crowd IS normal AND distance IS far AND smoke IS cloudy THEN risk IS medium;
        RULE 13 : IF type IS door AND crowd IS normal AND distance IS very_far AND smoke IS none THEN risk IS high;
        RULE 14 : IF type IS door AND crowd IS normal AND distance IS very_far AND smoke IS cloudy THEN risk IS high;
	RULE 15 : IF type IS door AND crowd IS crowded AND distance IS near AND smoke IS none THEN risk IS medium;
        RULE 16 : IF type IS door AND crowd IS crowded AND distance IS near AND smoke IS cloudy THEN risk IS medium;
        RULE 17 : IF type IS door AND crowd IS crowded AND distance IS far AND smoke IS none THEN risk IS high;
        RULE 18 : IF type IS door AND crowd IS crowded AND distance IS far AND smoke IS cloudy THEN risk IS high;
        RULE 19 : IF type IS door AND crowd IS crowded AND distance IS very_far AND smoke IS none THEN risk IS high;
        RULE 20 : IF type IS door AND crowd IS crowded AND distance IS very_far AND smoke IS cloudy THEN risk IS high;

END_RULEBLOCK

END_FUNCTION_BLOCK